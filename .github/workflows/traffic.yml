name: Daily traffic snapshot
# Tracks daily traffic data for bonsol-collective/bonsol repository
on:
  schedule:
    - cron: '20 3 * * *'        # 03:20 UTC â‰ˆ after previous day closes
  workflow_dispatch:

jobs:
  capture:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow writing to repository
    env:
      GH_TOKEN: ${{ secrets.GH_PAT }}   # PAT for reading bonsol traffic data
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Fetch traffic JSON from bonsol-collective/bonsol
        run: |
          echo "Fetching traffic data for bonsol-collective/bonsol repository..."
          gh api repos/bonsol-collective/bonsol/traffic/clones?per=day > clones.json
          gh api repos/bonsol-collective/bonsol/traffic/views?per=day  > views.json

      - name: Build yesterday's CSV row
        id: csv
        run: |
          python <<'PY'
          import json, datetime, csv, os, pathlib
          utc_yest = (datetime.datetime.now(datetime.timezone.utc) - datetime.timedelta(days=1)).strftime('%Y-%m-%d')
          
          # Debug: Show what date we're looking for
          print(f"Looking for data for date: {utc_yest}")
          
          # Debug: Show what data we actually have
          with open('clones.json', 'r') as f:
              clones_data = json.load(f)
              print(f"Clones data available dates: {[d['timestamp'][:10] for d in clones_data['clones']]}")
          
          with open('views.json', 'r') as f:
              views_data = json.load(f)
              print(f"Views data available dates: {[d['timestamp'][:10] for d in views_data['views']]}")
          
          def row(path, key):
              data = json.load(open(path))[key]
              for d in data:
                  if d['timestamp'].startswith(utc_yest):
                      return d['count'], d['uniques']
              return 0, 0  # Default to zero if no data found
          c_cnt, c_uni = row('clones.json', 'clones')
          v_cnt, v_uni = row('views.json',  'views')
          
          print(f"Data found - Clones: {c_cnt}/{c_uni}, Views: {v_cnt}/{v_uni}")
          
          pathlib.Path('data').mkdir(exist_ok=True)
          fn = 'data/traffic.csv'
          header = ['date','clone_count','clone_uniques','view_count','view_uniques']
          
          # Check if file exists and read existing data
          existing_dates = set()
          if pathlib.Path(fn).exists():
              with open(fn, 'r', newline='') as f:
                  reader = csv.reader(f)
                  next(reader, None)  # Skip header
                  for row in reader:
                      if row and len(row) > 0:
                          existing_dates.add(row[0])
          
          # Only write if this date doesn't already exist
          if utc_yest not in existing_dates:
              write_header = not pathlib.Path(fn).exists()
              with open(fn,'a',newline='') as f:
                  w = csv.writer(f)
                  if write_header: w.writerow(header)
                  w.writerow([utc_yest,c_cnt,c_uni,v_cnt,v_uni])
              print(f"New data added for {utc_yest}")
          else:
              print(f"Data for {utc_yest} already exists, skipping to avoid duplicates")
          print(f"CSV file created/updated with data for {utc_yest}")
          
          # Set output for next step (replaces deprecated set-output)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"changes=true\n")
          PY

      - name: Commit if file changed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "traffic-bot@users.noreply.github.com"
          git config --global user.name  "Traffic Bot"
          
          if git status --porcelain | grep -q '^ M data/traffic.csv\|^?? data/traffic.csv\|^?? data/'; then
            git add data/traffic.csv
            git commit -m "traffic data for bonsol-collective/bonsol repo - $(date -u +%F)"
            git push origin main
            echo "Successfully committed traffic data for $(date -u +%F)"
          else
            echo "No new data, nothing to commit."
          fi 
