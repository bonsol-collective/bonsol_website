name: Daily traffic snapshot
on:
  schedule:
    - cron: '20 3 * * *'        # 03:20 UTC â‰ˆ after previous day closes
  workflow_dispatch:

jobs:
  capture:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_PAT }}   # fine-grained PAT
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Fetch traffic JSON
        run: |
          gh api repos/bonsol-collective/bonsol/traffic/clones?per=day > clones.json
          gh api repos/bonsol-collective/bonsol/traffic/views?per=day  > views.json

      - name: Build yesterday's CSV row
        id: csv
        run: |
          python <<'PY'
          import json, datetime, csv, os, pathlib
          utc_yest = (datetime.datetime.utcnow() - datetime.timedelta(days=1)).strftime('%Y-%m-%d')
          
          # Debug: Show what date we're looking for
          print(f"Looking for data for date: {utc_yest}")
          
          # Debug: Show what data we actually have
          with open('clones.json', 'r') as f:
              clones_data = json.load(f)
              print(f"Clones data available dates: {[d['timestamp'][:10] for d in clones_data['clones']]}")
          
          with open('views.json', 'r') as f:
              views_data = json.load(f)
              print(f"Views data available dates: {[d['timestamp'][:10] for d in views_data['views']]}")
          
          def row(path, key):
              data = json.load(open(path))[key]
              for d in data:
                  if d['timestamp'].startswith(utc_yest):
                      return d['count'], d['uniques']
              return 0, 0  # Default to zero if no data found
          c_cnt, c_uni = row('clones.json', 'clones')
          v_cnt, v_uni = row('views.json',  'views')
          
          print(f"Data found - Clones: {c_cnt}/{c_uni}, Views: {v_cnt}/{v_uni}")
          
          pathlib.Path('data').mkdir(exist_ok=True)
          fn = 'data/traffic.csv'
          header = ['date','clone_count','clone_uniques','view_count','view_uniques']
          write_header = not pathlib.Path(fn).exists()
          with open(fn,'a',newline='') as f:
              w = csv.writer(f)
              if write_header: w.writerow(header)
              w.writerow([utc_yest,c_cnt,c_uni,v_cnt,v_uni])
          print(f"CSV file created/updated with data for {utc_yest}")
          print(f"::set-output name=changes::{'true'}")
          PY

      - name: Commit if file changed
        run: |
          git config --global user.email "traffic-bot@users.noreply.github.com"
          git config --global user.name  "Traffic Bot"
          
          # Configure git to use our PAT for authentication
          git config --global url."https://x-access-token:${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"
          
          # Debug: Show file status and contents
          echo "=== Git status ==="
          git status --porcelain
          echo "=== Checking for traffic.csv file ==="
          ls -la data/
          if [ -f "data/traffic.csv" ]; then
            echo "=== Contents of traffic.csv ==="
            cat data/traffic.csv
          else
            echo "traffic.csv file not found!"
          fi
          
          if git status --porcelain | grep -q '^ M data/traffic.csv\|^?? data/traffic.csv\|^?? data/'; then
            echo "=== File detected as changed, committing ==="
            git add data/traffic.csv
            git commit -m "Traffic data for $(date -u +%F)"
            git push
          else
            echo "No new data, nothing to commit."
          fi 
